name: Deploy CTI Dashboard

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'web-app/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'web-app/**'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation
        run: npm run build

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web-app/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Build application
        run: npm run build

      - name: Start preview server and run E2E tests
        timeout-minutes: 10
        run: |
          # Start the preview server in the background
          echo "Starting preview server..."
          npm run preview &
          PREVIEW_PID=$!
          
          # Wait for server to be ready by checking if it responds
          echo "Waiting for preview server to be ready..."
          SERVER_READY=false
          for i in {1..30}; do
            if curl -s http://localhost:4173 > /dev/null 2>&1; then
              echo "✅ Server is ready after $i attempts!"
              SERVER_READY=true
              break
            fi
            echo "⏳ Attempt $i/30: Server not ready yet, waiting 2s..."
            sleep 2
          done
          
          if [ "$SERVER_READY" = false ]; then
            echo "❌ Server failed to start after 60 seconds"
            echo "Preview server logs:"
            ps aux | grep preview
            kill $PREVIEW_PID 2>/dev/null || true
            exit 1
          fi
          
          # Give server a moment to fully stabilize
          sleep 3
          
          # Run the tests
          echo "🚀 Running E2E tests..."
          echo "🔍 Debug: TEST_USER_EMAIL is set: $([ -n "$TEST_USER_EMAIL" ] && echo "YES" || echo "NO")"
          echo "🔍 Debug: TEST_USER_PASSWORD is set: $([ -n "$TEST_USER_PASSWORD" ] && echo "YES" || echo "NO")"
          npm run test:e2e
          TEST_EXIT_CODE=$?
          
          # Clean up
          echo "🧹 Cleaning up preview server..."
          kill $PREVIEW_PID 2>/dev/null || true
          
          # Exit with test result
          exit $TEST_EXIT_CODE
        env:
          CI: true
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: cti-dashboard-459422

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy Backend to Cloud Functions
        run: |
          cd backend
          gcloud functions deploy api \
            --entry-point api \
            --runtime nodejs20 \
            --trigger-http \
            --allow-unauthenticated \
            --source . \
            --region europe-west2 \
            --set-env-vars "GCP_PROJECT=cti-dashboard-459422,FIRESTORE_DATABASE_ID=cti-db,GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
            --memory 256Mi \
            --timeout 60s

      - name: Setup Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web-app/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd web-app
          npm ci

      - name: Build frontend
        run: |
          cd web-app
          npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: cti-dashboard-459422.firebaseapp.com
          VITE_FIREBASE_PROJECT_ID: cti-dashboard-459422
          VITE_FIREBASE_STORAGE_BUCKET: cti-dashboard-459422.appspot.com
          VITE_FIREBASE_MESSAGING_SENDER_ID: 488117546170
          VITE_FIREBASE_APP_ID: 1:488117546170:web:e11316c2964819fb20e683
          VITE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Deploy Frontend to Firebase Hosting
        run: |
          npm install -g firebase-tools
          cd web-app
          echo "Firebase project configuration:"
          cat .firebaserc
          echo "Deploying to Firebase..."
          firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}" 