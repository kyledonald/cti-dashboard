import request from 'supertest';
import { createTestApp } from '../utils/test-setup';
import { createMockAuthMiddleware } from '../utils/mock-auth';
import { mockCVEs } from '../utils/test-data';

// Create test app
const app = createTestApp();

// Mock authentication middleware
const mockAuthMiddleware = createMockAuthMiddleware();
app.use(mockAuthMiddleware);

// Mock CVE endpoints
app.get('/cves', (req, res) => {
  const { cvssMin } = req.query;
  
  let filteredCVEs = [...mockCVEs];
  
  // FR06: Filter by CVSS score if specified
  if (cvssMin) {
    const minScore = parseFloat(cvssMin as string);
    if (!isNaN(minScore)) {
      filteredCVEs = filteredCVEs.filter(cve => cve.cvss >= minScore);
    }
  }
  
  res.status(200).json({
    cves: filteredCVEs,
    total: filteredCVEs.length
  });
});

app.get('/cves/:cveId', (req, res) => {
  const { cveId } = req.params;
  
  const cve = mockCVEs.find(c => c.cve === cveId);
  
  if (!cve) {
    return res.status(404).json({
      error: 'CVE not found',
      message: 'The specified CVE does not exist'
    });
  }
  
  // FR07: Return detailed CVE information
  res.status(200).json({
    cve: {
      id: cve.cve,
      cvss: cve.cvss,
      publicationDate: cve.published,
      description: cve.summary,
      severity: cve.cvss >= 9.0 ? 'Critical' : cve.cvss >= 7.0 ? 'High' : 'Medium'
    }
  });
});

describe('CVE Management & Viewing', () => {
  describe('FR06: High CVSS CVE Retrieval', () => {
    it('should retrieve all CVEs with CVSS score 8 or above', async () => {
      const response = await request(app)
        .get('/cves?cvssMin=8')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toHaveLength(3); // CVE-2024-0001 (9.8), CVE-2024-0002 (8.5), CVE-2024-0004 (9.9)
      expect(response.body.total).toBe(3);
      
      // Verify all returned CVEs have CVSS >= 8
      response.body.cves.forEach((cve: any) => {
        expect(cve.cvss).toBeGreaterThanOrEqual(8);
      });
      
      // Verify specific high CVSS CVEs are included
      const cveIds = response.body.cves.map((cve: any) => cve.cve);
      expect(cveIds).toContain('CVE-2024-0001'); // 9.8
      expect(cveIds).toContain('CVE-2024-0002'); // 8.5
      expect(cveIds).toContain('CVE-2024-0004'); // 9.9
    });

    it('should retrieve all CVEs when no CVSS filter is applied', async () => {
      const response = await request(app)
        .get('/cves')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toHaveLength(4); // All CVEs
      expect(response.body.total).toBe(4);
    });

    it('should return empty array when CVSS filter excludes all CVEs', async () => {
      const response = await request(app)
        .get('/cves?cvssMin=10')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toHaveLength(0);
      expect(response.body.total).toBe(0);
    });

    it('should handle invalid CVSS filter gracefully', async () => {
      const response = await request(app)
        .get('/cves?cvssMin=invalid')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toHaveLength(4); // Should return all CVEs when filter is invalid
      expect(response.body.total).toBe(4);
    });
  });

  describe('FR07: CVE Detail Viewing', () => {
    it('should return detailed CVE information including CVSS score, affected software, and publication date', async () => {
      const response = await request(app)
        .get('/cves/CVE-2024-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      const cve = response.body.cve;
      
      expect(cve.id).toBe('CVE-2024-0001');
      expect(cve.cvss).toBe(9.8);
      expect(cve.description).toBe('Critical vulnerability in Apache Log4j affecting Microsoft Windows systems');
      expect(cve.severity).toBe('Critical');
    });

    it('should return 404 for non-existent CVE', async () => {
      const response = await request(app)
        .get('/cves/CVE-2024-9999')
        .set('Authorization', 'Bearer admin-token')
        .expect(404);

      expect(response.body.error).toBe('CVE not found');
      expect(response.body.message).toBe('The specified CVE does not exist');
    });

    it('should allow all authenticated users to view CVE details', async () => {
      // Test admin access
      const adminResponse = await request(app)
        .get('/cves/CVE-2024-0002')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);
      
      expect(adminResponse.body.cve.id).toBe('CVE-2024-0002');

      // Test editor access
      const editorResponse = await request(app)
        .get('/cves/CVE-2024-0002')
        .set('Authorization', 'Bearer editor-token')
        .expect(200);
      
      expect(editorResponse.body.cve.id).toBe('CVE-2024-0002');

      // Test viewer access
      const viewerResponse = await request(app)
        .get('/cves/CVE-2024-0002')
        .set('Authorization', 'Bearer viewer-token')
        .expect(200);
      
      expect(viewerResponse.body.cve.id).toBe('CVE-2024-0002');
    });
  });
});
