import request from 'supertest';
import { createTestApp } from '../utils/test-setup';
import { createMockAuthMiddleware } from '../utils/mock-auth';
import { mockCVEs } from '../utils/test-data';

// Create test app
const app = createTestApp();

// Mock authentication middleware
const mockAuthMiddleware = createMockAuthMiddleware();
app.use(mockAuthMiddleware);

// Mock CVE search endpoint
app.get('/api/cves/search', (req: any, res) => {
  const { software, limit = 10 } = req.query;
  
  if (software === undefined) {
    return res.status(400).json({ error: 'Software parameter is required' });
  }

  if (software === '') {
    return res.status(200).json({
      cves: [],
      total: 0,
      searchTerm: ''
    });
  }

  // Filter CVEs by software name in summary (text matching only)
  const filteredCVEs = mockCVEs.filter(cve => {
    const searchTerm = software.toLowerCase();
    return cve.summary.toLowerCase().includes(searchTerm);
  });

  const limitedResults = filteredCVEs.slice(0, Number(limit));
  
  res.json({
    cves: limitedResults,
    total: filteredCVEs.length,
    searchTerm: software
  });
});

describe('FR10: Search CVEs by Software', () => {
  describe('Search functionality', () => {
    test('should search CVEs by software name in summary', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .query({ software: 'Microsoft' })
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toBeDefined();
      expect(response.body.total).toBeGreaterThan(0);
      expect(response.body.searchTerm).toBe('Microsoft');
      
      // Verify all returned CVEs contain Microsoft in summary
      response.body.cves.forEach((cve: any) => {
        expect(cve.summary.toLowerCase()).toContain('microsoft');
      });
    });

    test('should return empty results for non-existent software', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .query({ software: 'NonExistentSoftware123' })
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toEqual([]);
      expect(response.body.total).toBe(0);
    });

    test('should limit search results', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .query({ software: 'Microsoft', limit: 2 })
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves.length).toBeLessThanOrEqual(2);
      expect(response.body.total).toBeGreaterThanOrEqual(response.body.cves.length);
    });

    test('should perform case-insensitive search', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .query({ software: 'microsoft' })
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toBeDefined();
      expect(response.body.total).toBeGreaterThan(0);
    });
  });

  describe('Input validation', () => {
    test('should require software parameter', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .set('Authorization', 'Bearer admin-token')
        .expect(400);

      expect(response.body.error).toBe('Software parameter is required');
    });

    test('should handle empty software parameter', async () => {
      const response = await request(app)
        .get('/api/cves/search')
        .query({ software: '' })
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cves).toEqual([]);
      expect(response.body.total).toBe(0);
    });
  });
}); 
