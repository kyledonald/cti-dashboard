import request from 'supertest';
import { createTestApp } from '../../utils/test-setup';
import { createMockAuthMiddleware } from '../../utils/mock-auth';
import { mockIncidents } from '../../utils/test-data';

const app = createTestApp();

const mockAuthMiddleware = createMockAuthMiddleware();
app.use(mockAuthMiddleware);

app.get('/api/incidents/:incidentId', (req: any, res) => {
  const { incidentId } = req.params;
  const incident = mockIncidents.find(inc => inc.incidentId === incidentId);
  
  if (!incident) {
    return res.status(404).json({ error: 'Incident not found' });
  }
  
  res.json({ incident });
});

app.post('/api/incidents/:incidentId/comments', (req: any, res) => {
  const { incidentId } = req.params;
  const { content } = req.body;
  const user = req.user;
  
  if (!content || content.trim() === '') {
    return res.status(400).json({ error: 'Comment content is required' });
  }
  
  const incident = mockIncidents.find(inc => inc.incidentId === incidentId);
  if (!incident) {
    return res.status(404).json({ error: 'Incident not found' });
  }
  
  const newComment = {
    commentId: `comment_${Date.now()}`,
    userId: user.userId,
    userName: user.name,
    content: content.trim(),
    timestamp: new Date()
  };
  
  if (!incident.resolutionComments) {
    incident.resolutionComments = [];
  }
  incident.resolutionComments.push(newComment);
  
  res.status(201).json({ 
    message: 'Comment added successfully',
    comment: newComment
  });
});

app.delete('/api/incidents/:incidentId/comments/:commentId', (req: any, res) => {
  const { incidentId, commentId } = req.params;
  const user = req.user;
  
  const incident = mockIncidents.find(inc => inc.incidentId === incidentId);
  if (!incident) {
    return res.status(404).json({ error: 'Incident not found' });
  }
  
  if (!incident.resolutionComments) {
    return res.status(404).json({ error: 'Comment not found' });
  }
  
  const commentIndex = incident.resolutionComments.findIndex((c: any) => c.commentId === commentId);
  if (commentIndex === -1) {
    return res.status(404).json({ error: 'Comment not found' });
  }
  
  const comment = incident.resolutionComments[commentIndex];
  
  if (comment.userId !== user.userId && user.role !== 'admin') {
    return res.status(403).json({ error: 'You can only delete your own comments' });
  }
  
  incident.resolutionComments.splice(commentIndex, 1);
  
  res.json({ message: 'Comment deleted successfully' });
});

app.put('/api/incidents/:incidentId', (req: any, res) => {
  const { incidentId } = req.params;
  const updateData = req.body;
  const user = req.user;
  
  if (user.role === 'viewer') {
    return res.status(403).json({ error: 'Viewers cannot update incidents' });
  }
  
  const incident = mockIncidents.find(inc => inc.incidentId === incidentId);
  if (!incident) {
    return res.status(404).json({ error: 'Incident not found' });
  }
  
  if (updateData.status) {
    incident.status = updateData.status;
  }
  if (updateData.title) {
    incident.title = updateData.title;
  }
  if (updateData.description) {
    incident.description = updateData.description;
  }
  if (updateData.priority) {
    incident.priority = updateData.priority;
  }
  
  res.json({ 
    message: 'Incident updated successfully',
    incident
  });
});

app.delete('/api/incidents/:incidentId', (req: any, res) => {
  const { incidentId } = req.params;
  const user = req.user;
  
  if (user.role === 'viewer') {
    return res.status(403).json({ error: 'Viewers cannot delete incidents' });
  }
  
  const incidentIndex = mockIncidents.findIndex(inc => inc.incidentId === incidentId);
  if (incidentIndex === -1) {
    return res.status(404).json({ error: 'Incident not found' });
  }
  
  mockIncidents.splice(incidentIndex, 1);
  
  res.json({ message: 'Incident deleted successfully' });
});

describe('FR15-FR16: CVE Notes & Status Management', () => {
  beforeEach(() => {
    mockIncidents.length = 0;
    mockIncidents.push(
      {
        incidentId: 'inc1',
        title: 'Critical Security Breach',
        description: 'Unauthorized access detected',
        status: 'Open',
        priority: 'Critical',
        organizationId: 'org1',
        dateCreated: { _seconds: Date.now() / 1000 - 86400 },
        reportedByUserId: 'user1',
        reportedByUserName: 'Admin User',
        resolutionComments: []
      },
      {
        incidentId: 'inc2',
        title: 'Medium Priority Alert',
        description: 'Suspicious activity',
        status: 'In Progress',
        priority: 'Medium',
        organizationId: 'org1',
        dateCreated: { _seconds: Date.now() / 1000 - 172800 },
        reportedByUserId: 'user1',
        reportedByUserName: 'Admin User',
        resolutionComments: [
          {
            commentId: 'comment1',
            userId: 'user1',
            userName: 'Admin User',
            content: 'Initial investigation started',
            timestamp: new Date()
          }
        ]
      }
    );
  });

  describe('FR15: CVE Notes/Comments', () => {
    describe('Viewing Comments', () => {
      test('should allow all roles to see CVE comments', async () => {
        const roles = ['admin-token', 'editor-token', 'viewer-token'];
        
        for (const token of roles) {
          const response = await request(app)
            .get('/api/incidents/inc2')
            .set('Authorization', `Bearer ${token}`)
            .expect(200);

          expect(response.body.incident.resolutionComments).toBeDefined();
          expect(response.body.incident.resolutionComments).toHaveLength(1);
          expect(response.body.incident.resolutionComments[0].content).toBe('Initial investigation started');
        }
      });
    });

    describe('Adding Comments', () => {
      test('should allow all roles to add comments', async () => {
        const roles = ['admin-token', 'editor-token', 'viewer-token'];
        
        for (const token of roles) {
          const response = await request(app)
            .post('/api/incidents/inc1/comments')
            .send({ content: `Test comment from ${token}` })
            .set('Authorization', `Bearer ${token}`)
            .expect(201);

          expect(response.body.comment).toBeDefined();
          expect(response.body.comment.content).toBe(`Test comment from ${token}`);
        }
      });

      test('should reject empty comments', async () => {
        const response = await request(app)
          .post('/api/incidents/inc1/comments')
          .send({ content: '' })
          .set('Authorization', 'Bearer admin-token')
          .expect(400);

        expect(response.body.error).toBe('Comment content is required');
      });
    });

    describe('Deleting Comments', () => {
      test('should allow users to delete their own comments', async () => {
        const addResponse = await request(app)
          .post('/api/incidents/inc1/comments')
          .send({ content: 'My comment to delete' })
          .set('Authorization', 'Bearer editor-token')
          .expect(201);

        const commentId = addResponse.body.comment.commentId;

        await request(app)
          .delete(`/api/incidents/inc1/comments/${commentId}`)
          .set('Authorization', 'Bearer editor-token')
          .expect(200);
      });

      test('should allow admins to delete any comment', async () => {
        const addResponse = await request(app)
          .post('/api/incidents/inc1/comments')
          .send({ content: 'Editor comment' })
          .set('Authorization', 'Bearer editor-token')
          .expect(201);

        const commentId = addResponse.body.comment.commentId;

        await request(app)
          .delete(`/api/incidents/inc1/comments/${commentId}`)
          .set('Authorization', 'Bearer admin-token')
          .expect(200);
      });
    });
  });

  describe('FR16: CVE Status Management', () => {
    describe('Status Updates', () => {
      test('should allow admins to update incident status', async () => {
        const response = await request(app)
          .put('/api/incidents/inc1')
          .send({ status: 'In Progress' })
          .set('Authorization', 'Bearer admin-token')
          .expect(200);

        expect(response.body.incident.status).toBe('In Progress');
      });

      test('should allow editors to update incident status', async () => {
        const response = await request(app)
          .put('/api/incidents/inc1')
          .send({ status: 'Resolved' })
          .set('Authorization', 'Bearer editor-token')
          .expect(200);

        expect(response.body.incident.status).toBe('Resolved');
      });

      test('should prevent viewers from updating incident status', async () => {
        const response = await request(app)
          .put('/api/incidents/inc1')
          .send({ status: 'In Progress' })
          .set('Authorization', 'Bearer viewer-token')
          .expect(403);

        expect(response.body.error).toBe('Viewers cannot update incidents');
      });
    });

    describe('Incident Deletion', () => {
      test('should allow admins to delete incidents', async () => {
        await request(app)
          .delete('/api/incidents/inc1')
          .set('Authorization', 'Bearer admin-token')
          .expect(200);
      });

      test('should allow editors to delete incidents', async () => {
        await request(app)
          .delete('/api/incidents/inc1')
          .set('Authorization', 'Bearer editor-token')
          .expect(200);
      });

      test('should prevent viewers from deleting incidents', async () => {
        const response = await request(app)
          .delete('/api/incidents/inc1')
          .set('Authorization', 'Bearer viewer-token')
          .expect(403);

        expect(response.body.error).toBe('Viewers cannot delete incidents');
      });
    });
  });

  describe('Error Handling', () => {
    test('should handle non-existent incidents', async () => {
      const response = await request(app)
        .get('/api/incidents/nonexistent')
        .set('Authorization', 'Bearer admin-token')
        .expect(404);

      expect(response.body.error).toBe('Incident not found');
    });

    test('should handle non-existent comments', async () => {
      const response = await request(app)
        .delete('/api/incidents/inc1/comments/nonexistent')
        .set('Authorization', 'Bearer admin-token')
        .expect(404);

      expect(response.body.error).toBe('Comment not found');
    });
  });
}); 
