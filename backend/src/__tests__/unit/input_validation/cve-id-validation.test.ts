import request from 'supertest';
import { createTestApp } from '../../utils/test-setup';
import { createMockAuthMiddleware } from '../../utils/mock-auth';

// Create test app
const app = createTestApp();

// Mock authentication middleware
const mockAuthMiddleware = createMockAuthMiddleware();
app.use(mockAuthMiddleware);

// Mock CVE search endpoint with CVE ID validation
app.get('/api/cves/:cveId', (req: any, res) => {
  const { cveId } = req.params;

  // Test CVE ID validation logic
  const isValidCVEId = (cveId: string): boolean => {
    if (!cveId || typeof cveId !== 'string') return false;
    
    const trimmedCveId = cveId.trim();
    if (trimmedCveId.length === 0) return false;
    
    // Check if it starts with CVE-
    if (!trimmedCveId.toUpperCase().startsWith('CVE-')) return false;
    
    // Split by dash: CVE-YYYY-NNNN
    const parts = trimmedCveId.split('-');
    if (parts.length !== 3) return false;
    
    const [, year, number] = parts;
    
    // Validate year (4 digits, not 0000)
    if (!/^\d{4}$/.test(year) || year === '0000') return false;
    
    // Validate number (4-5 digits)
    if (!/^\d{4,5}$/.test(number)) return false;
    
    return true;
  };

  if (!isValidCVEId(cveId)) {
    return res.status(400).json({
      error: 'Invalid CVE ID format',
      message: 'CVE ID must be in format CVE-YYYY-NNNN or CVE-YYYY-NNNNN'
    });
  }

  // Mock CVE data
  const mockCVE = {
    cve: cveId.trim(),
    summary: 'Test CVE description',
    cvss: 7.5,
    published: '2024-01-01'
  };

  res.json({ cve: mockCVE });
});

describe('CVE ID Validation Tests', () => {
  describe('Valid CVE ID Formats', () => {
    test('should accept 4 or maximum 5 digit number', async () => {
      const response1 = await request(app)
        .get('/api/cves/CVE-2024-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response1.body.cve.cve).toBe('CVE-2024-0001');

      const response2 = await request(app)
        .get('/api/cves/CVE-2024-12345')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response2.body.cve.cve).toBe('CVE-2024-12345');
    });

    test('should ensure it follows the right format of CVE-year-numbers', async () => {
      const response = await request(app)
        .get('/api/cves/CVE-2024-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cve.cve).toBe('CVE-2024-0001');
    });

    test('should accept case insensitive prefix', async () => {
      const response = await request(app)
        .get('/api/cves/cve-2024-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(200);

      expect(response.body.cve.cve).toBe('cve-2024-0001');
    });
  });

  describe('Invalid CVE ID Formats', () => {
    test('should reject invalid CVE IDs', async () => {
      const response = await request(app)
        .get('/api/cves/invalid-cve-id')
        .set('Authorization', 'Bearer admin-token')
        .expect(400);

      expect(response.body.error).toBe('Invalid CVE ID format');
    });

    test('should reject invalid year', async () => {
      const response = await request(app)
        .get('/api/cves/CVE-ABCD-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(400);

      expect(response.body.error).toBe('Invalid CVE ID format');
    });

    test('should reject empty or whitespace CVE', async () => {
      const response = await request(app)
        .get('/api/cves/%20%20%20')
        .set('Authorization', 'Bearer admin-token')
        .expect(400);

      expect(response.body.error).toBe('Invalid CVE ID format');
    });

    test('should reject invalid prefix', async () => {
      const response = await request(app)
        .get('/api/cves/CVSS-2024-0001')
        .set('Authorization', 'Bearer admin-token')
        .expect(400);

      expect(response.body.error).toBe('Invalid CVE ID format');
    });
  });
}); 